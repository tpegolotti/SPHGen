{# ./templates/mult.j2 #}

{% if not jasmin -%}
// TODO this is a matrix operation
#define GATHER(out, memory) /* @SPHVerify: func gather  */\
    /* @SPHVerify: pre memory = sp.Matrix([sp.symbols(f'b_{i}') for i in range({{block_size * (simd_size) + block_size}})]).T*/\ 
    /* @SPHVerify: pre vindex = np.array([np.roll([2**(8*i) if i < 8 else 0 for i in range(memory.shape[1])],j * {{pib // 8}}) for j in range({{simd_size}})]).T*/\ 
    /* @SPHVerify: pre outx = [sp.Matrix([sp.symbols(f'a_{i}_{j}') for j in range({{simd_size}})]) for i in range({{l}})]*/\ 
    /* @SPHVerify: pre bigv_mask = {{2 ** big}} */\
    /* @SPHVerify: pre gather_small_mask = {{2 ** smallR}} */\
    /* @SPHVerify: pre or_mask = {{2 ** smallR}}*sp.ones(1,{{simd_size}}) */\
    /* @SPHVerify: post CO = sp.Matrix([outx[i] for i in range({{l}})])*/\
    /* @SPHVerify: post L = np.zeros(({{block_size}}, {{l}})).astype(np.int64)*/\
    /* @SPHVerify: post R = np.zeros(({{block_size}}, {{l}})).astype(np.int64)*/\
    {% for i in range(l) -%}
    /* @SPHVerify: post L[{{shift_right(i*big,3)}}:{{shift_right(i*big,3)+8}}, {{i}}] = 2**(np.arange({{8 - max(0, (((i*big//8)+8) - block_size))}}) * 8)*/\
    {% if (i*big//8)+8 > block_size -%}
    /* @SPHVerify: post R[:{{shift_right(i*big,3)+8 - block_size}}, {{i}}] = 2**(np.arange({{8 - max(0, (((i*big//8)+8) - block_size))}}, 8) * 8) */\
    {% endif -%}
    {% endfor -%}
    /* @SPHVerify: post M = memory.reshape({{simd_size + 1}}, {{block_size}})*/\
    /* @SPHVerify: post O = M[:{{simd_size}},:] @ L + M[1:,:] @ R*/\
    /* @SPHVerify: post div = np.array([2**((i * {{big}}) % 8) for i in range({{l}})]) */\
    /* @SPHVerify: post mask = np.array([bigv_mask for i in range({{l}})]) */\
    /* @SPHVerify: post mask[-1] = gather_small_mask */\
    /* @SPHVerify: post O = sp.Matrix(((O / div) % mask).T) */\
    /* @SPHVerify: post O[-1,:] += or_mask */\
    /* @SPHVerify: post assert O == CO */\
    {% for i in range(l) -%}
    out.x[{{i}}] = VGATHER(memory, {{shift_right(i*big,3)}}, vindex, 1); \
    {% endfor -%}
    {% for i in range(l) -%}
    out.x[{{i}}] = VSRLI(out.x[{{i}}], ({{(i * big) % 8}})); \
    {% endfor -%}
    {% for i in range(l-1) -%}
    out.x[{{i}}] = VAND(out.x[{{i}}], bigv_mask); \
    {% endfor -%}
    out.x[{{l-1}}] = VAND(out.x[{{l-1}}], gather_small_mask); \
    out.x[{{l-1}}] = VOR(out.x[{{l-1}}], or_mask); \
    /* @SPHVerify: endfunc gather  */

{% else %}

extern "C" __m256i* gather(__m256i* a, unsigned char* b, __m256i bigv_mask, __m256i gather_small_mask, __m256i or_mask);
#define GATHER(out, memory) gather(out.x, memory, bigv_mask, gather_small_mask, or_mask);

{% endif %}